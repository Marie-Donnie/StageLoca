#+TITLE: Report for : Un intergiciel d’une base de données NewSQL qui considère la localité de l’application cliente -- 5th week --
#+AUTHOR: Marie Delavergne

* Monday 12 February [2018-02-12 lun.]

- Trying the commented version for MariaDB as soon as I arrived
  + Reminder: we commented the volume created for the db because of [[https://stackoverflow.com/questions/34198735/could-not-open-mysql-plugin-table-some-plugins-may-be-not-loaded][this thread]]
  + MariaDB working after ~destroy~ and ~prepare~ BUT sysbench logs say:
    #+BEGIN_EXAMPLE
root@grisou-47:~# docker logs sysbench
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Initializing worker threads...

FATAL: unable to connect to MySQL server on host '172.16.72.47', port 3306, aborting...
FATAL: error 2013: Lost connection to MySQL server at 'reading initial communication packet', system error: 0
FATAL: `thread_init' function failed: /usr/share/sysbench/oltp_common.lua:347: connection creation failed
FATAL: Thread initialization failed!
Error in my_thread_global_end(): 1 threads didn't exit
    #+END_EXAMPLE
  + Trying to find the problem:
    #+BEGIN_EXAMPLE
root@grisou-47:~# docker run --name=sysbench2 -d severalnines/sysbench sysbench --db-driver=mysql --table-size=100000 --mysql-host=172.16.72.47 --mysql-port=3306 --mysql-user=sbtest --mysql-password=sbtest oltp_read_write prepare
1065d716e5850fc3eb7c7ce97bc3d95c4cb200d5453c7dc8aec230518542ff0a
root@grisou-47:~# docker logs sysbench2
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Creating table 'sbtest1'...
Inserting 100000 records into 'sbtest1'
Creating a secondary index on 'sbtest1'...
    #+END_EXAMPLE
  + And then:
#+BEGIN_EXAMPLE
root@grisou-47:~# docker run --name=sysbench3 -d severalnines/sysbench sysbench --db-driver=mysql --table-size=100000 --mysql-host=172.16.72.47 --mysql-port=3306 --mysql-user=sbtest --mysql-password=sbtest oltp_read_write run
230ff40920ef1cf34295a98333263daf3a5baf04086cb49c23701df443af7454
root@grisou-47:~# docker logs sysbench3
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            4256
        write:                           1216
        other:                           608
        total:                           6080
    transactions:                        304    (30.36 per sec.)
    queries:                             6080   (607.30 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          10.0095s
    total number of events:              304

Latency (ms):
         min:                                 22.82
         avg:                                 32.92
         max:                                142.99
         95th percentile:                     45.79
         sum:                              10007.83

Threads fairness:
    events (avg/stddev):           304.0000/0.00
    execution time (avg/stddev):   10.0078/0.00
#+END_EXAMPLE
  + I had to make another container because sysbench2 was already not responding, but this works and if it was a matter of creating another container, I would have the same error (container not running)

  + I try a clean deploy to check if at least works the first time or if I broke everything
    + First deploy is ok
      #+BEGIN_EXAMPLE
    root@grisou-18:~# docker logs sysbench
  sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

  Running the test with following options:
  Number of threads: 1
  Initializing random number generator from current time


  Initializing worker threads...

  Threads started!

  SQL statistics:
      queries performed:
          read:                            4438
          write:                           1268
          other:                           634
          total:                           6340
      transactions:                        317    (31.58 per sec.)
      queries:                             6340   (631.70 per sec.)
      ignored errors:                      0      (0.00 per sec.)
      reconnects:                          0      (0.00 per sec.)

  General statistics:
      total time:                          10.0344s
      total number of events:              317

  Latency (ms):
           min:                                 24.31
           avg:                                 31.65
           max:                                 74.07
           95th percentile:                     35.59
           sum:                              10032.58

  Threads fairness:
      events (avg/stddev):           317.0000/0.00
      execution time (avg/stddev):   10.0326/0.00
      #+END_EXAMPLE
    + second deploy, not that much
      #+BEGIN_EXAMPLE
      root@grisou-18:~# docker logs sysbench
  sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

  Running the test with following options:
  Number of threads: 1
  Initializing random number generator from current time


  Initializing worker threads...

  FATAL: unable to connect to MySQL server on host '172.16.72.18', port 3306, aborting...
  FATAL: error 2013: Lost connection to MySQL server at 'reading initial communication packet', system error: 0
  FATAL: `thread_init' function failed: /usr/share/sysbench/oltp_common.lua:347: connection creation failed
  FATAL: Thread initialization failed!
  Error in my_thread_global_end(): 1 threads didn't exit
      #+END_EXAMPLE
    + tried with a cleanup, didn't work either, and in any case I should have find a way to destroy sysbench before mariadb
    + when redeploying containers with prepare, Ronan makes me notice that the non-master mariadb nodes are 'changed'
      - I checked to see if they are running:
	#+BEGIN_EXAMPLE
  root@grisou-40:~# docker ps -a
  CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS                     PORTS               NAMES
  a04684ef6379        severalnines/sysbench   "sysbench --db-drive…"   2 minutes ago       Exited (1) 2 minutes ago                       sysbench
  ba638bef2e30        mariadb                 "docker-entrypoint.s…"   27 minutes ago      Exited (1) 2 minutes ago                       mariadb-grisou-40
  d561d3b8a480        grafana/grafana         "/run.sh"                27 minutes ago      Up 27 minutes                                  grafana
  3d0b8d36226a        influxdb                "/entrypoint.sh infl…"   27 minutes ago      Up 27 minutes                                  influxdb
  1f7909821e86        telegraf                "/entrypoint.sh tele…"   27 minutes ago      Up 27 minutes                                  telegraf
	#+END_EXAMPLE
      - So, the db container has been stopped AND there is a sysbench... of course, I didn't had the same "when" as for cockroachDB.
      - I didn't reported here as I was working for the work after, so I'll try to explain what happened anyway
	+ I still had errors in either sysbench (same one), the slaves (see below) or even the master
	+ For the slaves I had something like that (from [[https://stackoverflow.com/questions/39678463/docker-compose-database-is-uninitialized][stackoverflow]], since I don't have the logs anymore:
	  #+BEGIN_EXAMPLE
error: database is uninitialized and password option is not specified
You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD
	  #+END_EXAMPLE
	+ So I added the env variable =MYSQL_ROOT_PASSWORD= but then I had an init problem when checking the logs
	+ Luckily for me, I remember that on the [[https://withblue.ink/2016/03/09/galera-cluster-mariadb-coreos-and-docker-part-1.html][tutorial I followed]], there was an explanation about touching the /mnt/data/mysql:
	  #+BEGIN_EXAMPLE
Because the Docker image by default initializes a new database, we are using a trick to make sure that the full init script is not run on replicas: touch the mysql data folder. This is located inside the path mounted as volume in the container: for example, if our persistent volume is stored on the host in /mnt/data, the data folder will be /mnt/data/mysql.
	  #+END_EXAMPLE
	+ So I tried different combinations between mounting or not the volumes, creating the directories and deleting the directories until it worked.
	+ When doing these tries I managed to even break the master nodes, where I got an error:
	  #+BEGIN_EXAMPLE
	  Can't open and lock privilege tables: Table 'mysql.servers' doesn't exist
	  #+END_EXAMPLE
	+ It finally worked when I commented the mounting of the volume on the master


  + Since it worked, I tried to put the same options as the tests I made for CockroachDB, i.e.:
  #+BEGIN_SRC
command: sysbench --db-driver=pgsql --pgsql-host="{{ hostvars[inventory_hostname]['ansible_' + control_network]['ipv4']['address'] }}" --pgsql-port=26257 --pgsql-user=root --table-size=1000000 --index-updates=0 --non-index-updates=1 --delete-inserts=0 oltp_read_write run
  #+END_SRC
  + So I ran
#+BEGIN_SRC
command: sysbench --db-driver=mysql --table-size=100000 --mysql-host="{{ hostvars[inventory_hostname]['ansible_' + control_network]['ipv4']['address'] }}" --mysql-port=3306 --mysql-user=sbtest --mysql-password=sbtest --index-updates=0 --non-index-updates=1 --delete-inserts=0  oltp_read_write run
#+END_SRC
  + Obtained:
#+BEGIN_EXAMPLE
root@grisou-18:~# docker logs sysbench
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            6426
        write:                           301
        other:                           1076
        total:                           7803
    transactions:                        459    (45.85 per sec.)
    queries:                             7803   (779.50 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          10.0082s
    total number of events:              459

Latency (ms):
         min:                                  1.50
         avg:                                 21.80
         max:                                184.77
         95th percentile:                     36.89
         sum:                              10006.17

Threads fairness:
    events (avg/stddev):           459.0000/0.00
    execution time (avg/stddev):   10.0062/0.00
#+END_EXAMPLE
  + which is not as good as CockroachDB (cf friday of last week)

- Now I am wondering if sysbench is not launched *before* the syncing of all nodes, so I might need to add another =wait_for=
  + [[https://github.com/Marie-Donnie/juice/commit/7b112e20fcfbb3d228a18787dbea36310455df71][done]]

- Tomorrow I'll use the trick with templating to remove refactor cockroachdb role


* Tuesday 13 February [2018-02-13 mar.]


- Refactoring cockroachdb
  + not sure if I can do it in only one play because of the required order (the master must be launched before the others)
    #+BEGIN_SRC
- name: Start cockroachdb
 docker_container:
   name: "cockroachdb-{{ inventory_hostname_short }}"
   image: "cockroachdb/cockroach"
   hostname: "{{ inventory_hostname }}"
   detach: True
   ports:
     - 26257:26257
     - 8080:8080
   command: start --insecure --advertise-host="{{ hostvars[inventory_hostname]['ansible_' + control_network]['ipv4']['address'] }}" {% if (inventory_hostname != dbmaster_node) %} --join="{{ hostvars[dbmaster_node]['ansible_' + control_network]['ipv4']['address'] }}"{% endif %} {% if locality %} --locality=region="{{inventory_hostname_short}}"{% endif %}
    #+END_SRC
  + Ronan tells me to do it with two plays


** Tests
*** CockroachDB
- Funny thing: I tried again to add "--index-updates=0 --non-index-updates=1 --delete-inserts=0" when deploying with Cockroach db on Grisou to be sure I can compare it to MariaDB:
  + without:
    #+BEGIN_EXAMPLE
root@grisou-38:~# docker logs -f sysbench
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            490
        write:                           35
        other:                           175
        total:                           700
    transactions:                        35     (3.49 per sec.)
    queries:                             700    (69.81 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          10.0247s
    total number of events:              35

Latency (ms):
         min:                                143.33
         avg:                                286.40
         max:                                527.55
         95th percentile:                    493.24
         sum:                              10024.03

Threads fairness:
    events (avg/stddev):           35.0000/0.00
    execution time (avg/stddev):   10.0240/0.00
    #+END_EXAMPLE
  + with
    #+BEGIN_EXAMPLE
root@grisou-38:~# docker logs -f sysbench
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            15890
        write:                           0
        other:                           3405
        total:                           19295
    transactions:                        1135   (113.41 per sec.)
    queries:                             19295  (1928.04 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          10.0056s
    total number of events:              1135

Latency (ms):
         min:                                  8.36
         avg:                                  8.81
         max:                                 16.06
         95th percentile:                      9.56
         sum:                              10002.95

Threads fairness:
    events (avg/stddev):           1135.0000/0.00
    execution time (avg/stddev):   10.0030/0.00
    #+END_EXAMPLE
  + tried another one without to be sure:
    #+BEGIN_EXAMPLE
root@grisou-38:~# docker logs -f sysbench
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            1232
        write:                           90
        other:                           438
        total:                           1760
    transactions:                        88     (8.79 per sec.)
    queries:                             1760   (175.79 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          10.0096s
    total number of events:              88

Latency (ms):
         min:                                 97.19
         avg:                                113.74
         max:                                155.30
         95th percentile:                    142.39
         sum:                              10008.79

Threads fairness:
    events (avg/stddev):           88.0000/0.00
    execution time (avg/stddev):   10.0088/0.00
    #+END_EXAMPLE

*** MariaDB

- Without:
#+BEGIN_EXAMPLE
root@grisou-38:~# docker logs -f sysbench
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            4326
        write:                           690
        other:                           1164
        total:                           6180
    transactions:                        309    (30.89 per sec.)
    queries:                             6180   (617.83 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          10.0005s
    total number of events:              309

Latency (ms):
         min:                                 22.86
         avg:                                 32.36
         max:                                104.53
         95th percentile:                     45.79
         sum:                               9999.26

Threads fairness:
    events (avg/stddev):           309.0000/0.00
    execution time (avg/stddev):   9.9993/0.00
#+END_EXAMPLE
- With:
#+BEGIN_EXAMPLE
root@grisou-38:~# docker logs -f sysbench
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            12236
        write:                           294
        other:                           2328
        total:                           14858
    transactions:                        874    (87.37 per sec.)
    queries:                             14858  (1485.26 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          10.0015s
    total number of events:              874

Latency (ms):
         min:                                  1.38
         avg:                                 11.44
         max:                                 72.69
         95th percentile:                     34.33
         sum:                               9999.14

Threads fairness:
    events (avg/stddev):           874.0000/0.00
    execution time (avg/stddev):   9.9991/0.00
#+END_EXAMPLE

** Sysbench

- Tried to use =common.lua= and =oltp_aria.lua= found in the sysbench-runner from [[https://code.launchpad.net/mariadb-tools][mariadb-tools]] but I couldn't make them work
#+BEGIN_EXAMPLE
root@grisou-38:~# docker logs -f sysbench
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

FATAL: Cannot find benchmark '/home/madelavergne/juice/oltp_aria.lua': no such built-in test, file or module
#+END_EXAMPLE

- Solved the problem by mounting the volume for sysbench container

** Work with Ronan

- We searched why I got the error
#+BEGIN_EXAMPLE
Threads started!

FATAL: PQexec() failed: 7 restart transaction: HandledRetryableTxnError: TransactionRetryError: retry txn (RETRY_SERIALIZABLE): "sql txn" id=08f0adef key=/Table/52/1/5019 rw=true pri=0.02680100 iso=SERIALIZABLE stat=PENDING epo=0 ts=1518527373.993209368,1 orig=1518527373.980746986,0 max=1518527373.980746986,0 wto=false rop=false seq=16
FATAL: failed query was: COMMIT
FATAL: `thread_run' function failed: /home/madelavergne/juice/oltp_aria.lua:90: db_query() failed
#+END_EXAMPLE
  + We looked into =oltp_aria.lua=
  + Reminder:
    - begin/commit mechanism differs from an implementation to another
    - CockroachDB is optimist: he retries what went wrong if a problem occurs
      + he uses a mechanism of savepoint/rollback (everything that occured between them is abandonned and retried)
      + or we can also implement an exponential backoff algortihm to avoid contention
  + we tried to comment ~BEGIN~ and ~COMMIT~ and replaced them with ~SELECT 1~
    - the tests are then ok so we look into the driver, especially [[https://github.com/akopytov/sysbench/blob/master/src/drivers/pgsql/drv_pgsql.c#L690][this line]]
    - we find out that pgsql driver doesn't allow any retry
    - so we're going to have to make our own driver (by modifying pgsl driver a bit) to allow retries
      + have to choose between rollbacks or exponential backoff
      + maybe add an option to choose between those mechanisms
    - when the driver will be modified, we will have to rebuild
      + ./autogen.sh --with-pgsql
      + ./configure
      + make -j
      + dockerize with ubuntu


- We looked into what tests should we do:
  + maybe =range select=
  + =point select= yes, with adjusted value in the command
- The goal is to be able to, when there is something strange while using CockroachDB with Keystone, justify how it's possible to make it better on sysbench


- Reworking juice
  + Ronan showed me how collectd is used in Enos
  + Have to rearrange juice so I can make tests separately from the deployment
    - [X] tasks
      + [X] prepare calls prepare.yml (all)
      + [X] stress calls stress.yml (sysbench)
      + [X] openstack calls openstack.yml (keystone)
    - [X] backup and destroy uses the three files
    - [X] move =wait_for= from sysbench deploy to the DB deploys
    - [X] add collectd and cadvisor in "install monitoring agents" for every database node

- Keeping that somewhere (removed it since we won't use it but I like to know how I did it):
#+BEGIN_EXAMPLE
  - name: Start sysbench on CockroachDB
    docker_container:
      name: "sysbench"
      image: "severalnines/sysbench"
      detach: True
      volumes:
        - "/home/madelavergne/juice:/home/madelavergne/juice"
      command: sysbench --db-driver=pgsql --pgsql-host="{{ hostvars[inventory_hostname]['ansible_' + control_network]['ipv4']['address'] }}" --pgsql-port=26257 --pgsql-user=root --table-size=1000000 /home/madelavergne/juice/oltp_aria.lua prepare
    when: db == 'cockroachdb'

  - name: Run sysbench on CockroachDB
    docker_container:
      name: "sysbench"
      image: "severalnines/sysbench"
      detach: True
      volumes:
        - "/home/madelavergne/juice:/home/madelavergne/juice"
      command: sysbench --db-driver=pgsql --pgsql-host="{{ hostvars[inventory_hostname]['ansible_' + control_network]['ipv4']['address'] }}" --pgsql-port=26257 --pgsql-user=root --table-size=1000000 /home/madelavergne/juice/oltp_aria.lua run
    when: db == 'cockroachdb'
#+END_EXAMPLE

- Works for CockroachDB, have to try for MariaDB before pushing


* Wednesday 14 February [2018-02-14 mer.]

- Trying to make cadvisor work; some variables were a bit difficult to understand (=#influx_vip=)
- Same problem with collectd

- Made it work without errors but I don't know if it actually works
  + Ronan notices some problems, especially with influxdb so I add another node for grafana, influx and registry

- Ronan came to help me this afternoon, we made everything work ([[https://github.com/Marie-Donnie/juice/commit/be24209ec4bd95e1447144c94f783bf83126c0e1][commit]])
  + We managed to get results on Grafana dashboard, showing CPU usage of 3 galera nodes (1 master 2 slaves) during a sysbench:
      #+CAPTION: Grafana dashboard showing CPU usage of 3 galera nodes (1 master 2 slaves) during a sysbench
      #+NAME: fig:first_grafana
[[../images/first_grafana.png]]
  + Since we used =prepare= to make everything work bit by bit, we didn't deploy from scratch
  + When I did after the commit, I had a bug
    #+BEGIN_EXAMPLE
TASK [mariadb : Start the MariaDB-master container] ****************************************************
skipping: [grisou-11.nancy.grid5000.fr]
skipping: [grisou-34.nancy.grid5000.fr]
fatal: [grisou-36.nancy.grid5000.fr]: FAILED! => {"changed": false, "failed": true, "msg": "Error connecting: Error while fetching server API version: ('Connection aborted.', error(2, 'No such file or directory'))"}

TASK [mariadb : Waiting the MariaDB master to be ready] ************************************************
skipping: [grisou-11.nancy.grid5000.fr]
skipping: [grisou-34.nancy.grid5000.fr]

TASK [mariadb : Start the MariaDB container] ***********************************************************
fatal: [grisou-11.nancy.grid5000.fr]: FAILED! => {"changed": false, "failed": true, "msg": "Error connecting: Error while fetching server API version: ('Connection aborted.', error(2, 'No such file or directory'))"}
fatal: [grisou-34.nancy.grid5000.fr]: FAILED! => {"changed": false, "failed": true, "msg": "Error connecting: Error while fetching server API version: ('Connection aborted.', error(2, 'No such file or directory'))"}
    #+END_EXAMPLE
  + After a bit of digging around what we changed in mariadb playbooks, I looked to the =prepare.yml= and I had a hunch that registry being only on control node might be responsible, so I put back 'all'


* Thursday 15 February [2018-02-15 jeu.]

- Today is maintenance day until 1pm. Funny how I forgot that when getting here earlier this morning.

- Ronan sent me links to a collectd plugin: [[https://github.com/chrisboulton/collectd-python-mysql][python-mysql]] also described [[https://grafana.com/dashboards/561][here]]

- While waiting, looking into [[https://github.com/astaxie/tidb][tidb]] and [[https://crate.io][cratedb]]
  + Also [[https://github.com/rystsov/perseus][perseus]] which compares responsivness of distributed databases when a node is separated from the peers (split brain)

- Making python mysql work ([[https://github.com/Marie-Donnie/juice/commit/15d8a2201b2876cb723453a130446b612791ad4c][commit]]):
  + Added dependency to common deploy
  + Added destroy/backup files for cadvisor and collectd
  + Nothing to be done on =collectd.conf=
  + Added mysql.py from python mysql plugin to ensure I have a working version
  + Created plugin directory to be able to correctly copy the file at the right place
  + [[
https://github.com/Marie-Donnie/juice/blob/15d8a2201b2876cb723453a130446b612791ad4c/ansible/roles/collectd/templates/python-mysql.conf.j2][python mysql template]] has to have a ending (trailing?) return or it cannot be parsed (luckily for me, Ronan was passing by and he had the same problem with haproxy :p)
  + We improved the separation between prepare and sysbench by removing the creation of the database from mariadb deploy and added removal/creation of the required database to sysbench deploy, along with the creation of the user sbtest
  + We also changed their detach state to False so the deployment would wait for them to be completed
  + There is currently a bug when user docker with enoslib version of ansible, so I had to specify which version of Docker to use
  + Removed the database for mysql plugin to avoid duplicates with python mysql plugin

- We then changed the table size for sysbench to try to get longer results and checked grafana:
  + there are 2 good dashboards we used:
    - [[https://grafana.com/dashboards/561][MySQL Metrics]] which gives informations about mariadb's performance
    - [[https://grafana.com/dashboards/564][MySQL InnoDB Metrics]] centered specifically on InnoDB engine for MariaDB
      #+CAPTION: Grafana dashboard showing MySQL Metrics during sysbench
      #+NAME: fig:mysql_metrics
[[../images/MySQL_metrics.png]]


* Friday 16 February [2018-02-16 ven.]

- Beginning working on putting Keystone upon this

- Thought I would need to specify Openstack release (between pike and queens) but then I realized there were forks from OpenStack which didn't have queens version. I'm puting that aside for now:
  #+BEGIN_EXAMPLE
    --release RELEASE     OpenStack release to use [default: pike]
        "release": release,
  #+END_EXAMPLE

- I copied [[https://github.com/BeyondTheClouds/openstack-cockroachdb-dev/blob/master/provision.yml][enos provision file]] from devstack (l.66) to have an idea of what I had to do, but this was done using Vagrant, so I have to adjust things a bit


- Had to add the pip installs because they were required


- What had to be done manually:
  + pip: the deployement was stucked during pip installation
    - tried to install them manually, but had to switch to root
    - should be ok now since I removed sudo su stack from bashrc
      #+BEGIN_EXAMPLE
    pip install -e git+https://github.com/cockroachdb/cockroachdb-python.git#egg=cockroachdb
    pip install -e git+https://github.com/rcherrueau/sqlalchemy-migrate.git@cockroachdb/pike#egg=sqlalchemy-migrate
      #+END_EXAMPLE
  + I required to switch to user stack, so I need to copy authorized keys to connect to stack
    #+BEGIN_EXAMPLE
  mkdir /opt/stack/.ssh
  cp .ssh/authorized_keys /opt/stack/.ssh/
    #+END_EXAMPLE
  + chmod 777 /opt/stack/devstack/.localrc.password to avoid =ENTER A PASSWORD TO USE FOR THE DATABASE. / ENTER A PASSWORD TO USE FOR RABBIT.=
  + [[http://manish-lamichhane.com.np/technology/install-libmysqlclient-dev-debain-9/][to solve libmysqlclient-dev problem]]
    #+BEGIN_EXAMPLE
  Package libmysqlclient-dev is not available, but is referred to by another package.
  This may mean that the package is missing, has been obsoleted, or
  is only available from another source

  E: Package 'libmysqlclient-dev' has no installation candidate
    #+END_EXAMPLE
    - doesn't work: apt install default-libmysqlclient-dev
  + execution order for creating/using the database?
  + avoid duplicates? maybe using [[https://blog.zhaw.ch/icclab/how-to-install-a-multi-region-devstack-part-1/][regions tutorial]]

- Got master node pass devstack
#+BEGIN_EXAMPLE
=========================
DevStack Component Timing
=========================
Total runtime    324run_process        0
apt-get-update     1
osc               56
wait_for_service   4
dbsync           166
pip_install       40
apt-get            1
=========================This is your host IP address: 172.16.72.6
This is your host IPv6 address: ::1
Keystone is serving at http://172.16.72.6/identity/
The default users are: admin and demo
The password: adminServices are running under systemd unit files.
For more information see:
https://docs.openstack.org/devstack/latest/systemd.htmlDevStack Version: pike
Change:
OS Version: Debian 9.3 stretch2018-02-16 15:43:48.779 | stack.sh completed in 324 seconds.
#+END_EXAMPLE

- Still have problems with the other nodes; have to figure out how to make them wait long enough
  + tried:
    #+BEGIN_EXAMPLE
stack@grisou-7:~$ while $(sudo docker exec -i cockroachdb-grisou-7 ./cockroach sql --insecure --execute 'select * from [SHOW DATABASES] where "Database" = '\''keystone'\''') | grep "# 1 row"; do echo "&"; done
bash: Database: command not found
stack@grisou-7:~$ while $(sudo docker exec -i cockroachdb-grisou-7 ./cockroach sql --insecure --execute 'select * from [SHOW DATABASES] where "Database" = '\''keystone'\''') | grep "1 row"; do echo "&"; done
bash: Database: command not found
stack@grisou-7:~$ while $(sudo docker exec -i cockroachdb-grisou-7 ./cockroach sql --insecure --execute 'select * from [SHOW DATABASES]) | grep "# 1 row"; do echo "&"; done
> ^C
stack@grisou-7:~$ while $(sudo docker exec -i cockroachdb-grisou-7 ./cockroach sql --insecure --execute 'select * from [SHOW DATABASES]') | grep "# 1 row"; do echo "&"; done
bash: Database: command not found
stack@grisou-7:~$ while $(sudo docker exec -i cockroachdb-grisou-7 ./cockroach sql --insecure --execute 'select * from [SHOW DATABASES]') | grep "# 1 row"; do echo "&"; done
bash: Database: command not found
stack@grisou-7:~$ while $(sudo docker exec -i cockroachdb-grisou-7 ./cockroach sql --insecure --execute 'select * from [SHOW DATABASES]') | grep "# 1 row"; do echo "&"; done
bash: Database: command not found
stack@grisou-7:~$ while $(sudo docker exec -i cockroachdb-grisou-7 ./cockroach sql --insecure --execute 'select * from [SHOW DATABASES]') | grep "# 1 row"; do echo "&"; done
bash: Database: command not found
stack@grisou-7:~$ while "$(sudo docker exec -i cockroachdb-grisou-7 ./cockroach sql --insecure --execute 'select * from [SHOW DATABASES]')" | grep "# 1 row"; do echo "&"; done
bash: $'Database\ncrdb_internal\ninformation_schema\nkeystone\npg_catalog\nsystem\n# 5 rows': command not found
stack@grisou-7:~$ while [ "$(sudo docker exec -i cockroachdb-grisou-7 ./cockroach sql --insecure --execute 'select * from [SHOW DATABASES]')" | grep "# 1 row" ]; do echo "&"; done
grep: ]: No such file or directory
bash: [: missing `]'
stack@grisou-7:~$ while $(fgrep "# 1" "$(sudo docker exec -i cockroachdb-grisou-7 ./cockroach sql --insecure --execute 'select * from [SHOW DATABASES]')"); do echo "&"; done
grep: Database
crdb_internal
information_schema
keystone
pg_catalog
system
# 5 rows: No such file or directory
    #+END_EXAMPLE


- Btw, thanks to the logs:
#+BEGIN_QUOTE
admin already has admin on admin.
#+END_QUOTE


- Bonus: =oarwalltime <nb_job> +1:00= pour prolonger le job (doit être numéro de job, pas le numéro oargrid)
