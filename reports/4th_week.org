#+TITLE: Report for : Un intergiciel d’une base de données NewSQL qui considère la localité de l’application cliente -- 4th week --
#+AUTHOR: Marie Delavergne

* Monday 5 February [2018-02-05 lun.]

- Been thinking about adding vars in =extra_vars= during the ~prepare~ task but I don't think it would be a good way
- The other solution I thought about was to add vars in the beginning of the sysbench ~deploy~, depending on the 'db' var

- For now, I will concentrate on making everything work and then I will see about making it the proper way

- Added the run to the deployment
#+BEGIN_EXAMPLE
root@parapluie-25:~# docker logs sysbench
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            2646
        write:                           360
        other:                           774
        total:                           3780
    transactions:                        189    (18.83 per sec.)
    queries:                             3780   (376.60 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          10.0351s
    total number of events:              189

Latency (ms):
         min:                                 32.82
         avg:                                 53.08
         max:                                391.95
         95th percentile:                     95.81
         sum:                              10032.55

Threads fairness:
    events (avg/stddev):           189.0000/0.00
    execution time (avg/stddev):   10.0326/0.00
#+END_EXAMPLE

- Now, doing the same with CockroachDB
  + Using [[https://www.cockroachlabs.com/docs/stable/use-the-built-in-sql-client.html][Cockroach doc]]
    #+BEGIN_EXAMPLE
root@parapluie-1:~# docker exec -d cockroachdb-master cockroach sql --insecure --execute="CREATE DATABASE sbtest;"
Error response from daemon: OCI runtime exec failed: exec failed: container_linux.go:296: starting container process caused "exec: \"cockroach\": executable file not found in $PATH": unknown
    #+END_EXAMPLE

** Meeting with Matthieu

For cockroach:
- Know where the request has been

For everything:
- Get disk I/O


** Refactoring with Ronan

- Corrected command [[https://github.com/Marie-Donnie/juice/commit/41526a257ef686958c9ff9429644d7a81c6b8a1c][to create database]]
  + Ok but breaks the other nodes since they don't have a cockroach-master docker
- Did a bit of refactoring to avoid duplicated code [[https://github.com/Marie-Donnie/juice/commit/edaebe2e5b6032a0e54c2eb62b64476f3d91112f][here]]
  + Trying to deploy that version now


* Tuesday 6 February [2018-02-06 mar.]

** Meeting with Ronan and Adrien

- About the tests we are going to do

- Reminder:
  #+BEGIN_QUOTE
- several regions
  + common authentication
  + number of regions: 1, 5, 10, 25, (100?)
  + latency between regions (RTT): LAN, 10, 50, 100, 300
    - 1 common keystone
      + one region has the keystone
      + the others refers to this keystone
      + one database
    - 1 keystone per region with a common state
      + Galera vs CockroachDB
    - 1 keystone per region using K2K federation
  #+END_QUOTE

- Adrien is ok with this, so we can resume our work

** Tests

- When deploying yesterday afternoon, I forgot to add the host ip for sysbench deployment
  - ok
    #+BEGIN_EXAMPLE
root@grisou-40:~# docker logs sysbench
sysbench 1.0.7 (using bundled LuaJIT 2.1.0-beta2)

Running the test with following options:
Number of threads: 1
Initializing random number generator from current time


Initializing worker threads...

Threads started!

SQL statistics:
    queries performed:
        read:                            1204
        write:                           86
        other:                           430
        total:                           1720
    transactions:                        86     (8.56 per sec.)
    queries:                             1720   (171.15 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)

General statistics:
    total time:                          10.0473s
    total number of events:              86

Latency (ms):
         min:                                 97.29
         avg:                                116.82
         max:                                148.84
         95th percentile:                    142.39
         sum:                              10046.54

Threads fairness:
    events (avg/stddev):           86.0000/0.00
    execution time (avg/stddev):   10.0465/0.00
    #+END_EXAMPLE

** Planning

- We prepared a planning for the work to do:
*** summit deadline
    DEADLINE: <2018-02-08 jeu.>
*** be able to backup the results
    DEADLINE: <2018-02-09 ven.>
*** end of tests
    DEADLINE: <2018-03-30 ven.>
*** summit
    SCHEDULED: <2018-05-21 lun.>

- To do so, I have to look at how we are going to collect informations about CockroachDB and MariaDB
  + For MariaDB, it will probably be [[https://collectd.org/documentation/manpages/collectd.conf.5.shtml#plugin_mysql][collectd]]
  + For CockroachDB, we have several leads:
    - [[https://www.cockroachlabs.com/docs/stable/monitor-cockroachdb-with-prometheus.html][Monitor CockroachDB with Prometheus]]
    - [[https://www.cockroachlabs.com/docs/stable/show-sessions.html][MySQL API]] (=SHOW <OPTION>=)
      + Session seems promising because it gives the node it is connected to, the queries and the timestamp
    - Find if there is a rest API [[https://github.com/cockroachdb/cockroach/pull/4844][like that]]
